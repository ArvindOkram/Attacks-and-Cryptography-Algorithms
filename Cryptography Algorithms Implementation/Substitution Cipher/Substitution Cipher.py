"""
____________________________________________________________________
A script to identify the Key and plaintext from the given cipher text which is
written using Substitution Cipher (Brute Force Attack). You can use the ‘output.txt’ file as
the file for cipher text. Identify the plaintext and key and write it into other file
"plaintext.txt"
Example cipher: GUVF VF ZL FRPERG ZRFFNTR


PREREQUISITE FOR THE PROGRAM : Please install langdetect package to detect whether 
                               the generated plain text is English language
INSTALLING LANGDETECT : In command prompt please run the command "pip install langdetect" 

NOTE: This program undergoes brute-force attack

This program is written using Python Version 3
______________________________________________________________________________________________

"""
import string #importing string	
from langdetect import detect #importing langdetect package

all_letters= string.ascii_letters #list of all characters   
      
key = 0 #taking key as zero initially
possible_key = "" #sting to hold possible keys
possible_plain_text = "" #string to hold possible cipher text

cipher_txt = open("output.txt",'r') #opening the cipher text file
content = cipher_txt.read() #reading the cipher text file and copying ot the variable content

#a loop to undergo brute force attack by trying all keys
while(key<26):     
    
    # a dictionary to store the substituted alphabet in the cipher text 
    dict2 = {}   
    #decrypting with key that is taken in bruteforce manner  
    for i in range(len(all_letters)): 
        dict2[all_letters[i]] = all_letters[(i-key)%(len(all_letters))] 
           
    # variable to hold the plaintext generated by the loop 
    decrypt_txt = [] 
    
    #a loop to recover the plaintext  
    for char in content: 
        if char in all_letters: 
        	#adds the corresponding plaintext alphabet of the cipher text
        	#if it is ansii character
            temp = dict2[char] 
            decrypt_txt.append(temp) 
        else:
        	#else append the cipher character directly
        	#this else statement works for space, comma etc. 
            temp = char 
            decrypt_txt.append(temp) 
    
    #joining the plaintext alphabet          
    decrypt_txt = "".join(decrypt_txt) 

    language = detect(decrypt_txt)#detecting the generated plaintext

    if(language == 'en'):
    	#if language is englsih add text to possible_plain_text
    	#and add key to possible key
        print("Key : ",key);
        print("Recovered plain text :", decrypt_txt.upper()) 
        possible_key+=str(key)
        possible_key+="  "
        possible_plain_text+=decrypt_txt.upper()
        possible_plain_text+= "  "
    key = key+1

#generate/open a key.txt file containing our possible key
key_out = open("key.txt","w+")
key_out.write("The list of possible keys : \n")
# writing the possible keys to key_out
key_out.write(possible_key)
key_out.close() 

#generate/open a plaintext.txt file containing our possible key
plain_out = open("plaintext.txt","w+")
plain_out.write("The list of possible plaintexts")
# writing the possible plaintexts to plain_out
plain_out.write(possible_plain_text)
plain_out.close()

#closes the cipher text file ie output.txt
cipher_txt.close()